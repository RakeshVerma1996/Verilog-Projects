`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05.09.2022 15:52:11
// Design Name: 
// Module Name: practice
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


primitive carry(cy,a,b,c);
input a,b,c;
output cy;
table 
//   a   b   c     cy
1 1 ? : 1;
1 ? 1 : 1;
? 1 1 : 1;
0 0 ? : 0;
0 ? 0 : 0;
? 0 0 : 0;

endtable

endprimitive





///////////////simple  counter

 module simple_counter(clk,rst,count);
 input clk,rst;
 output reg [31:0]count;
 
always@(posedge clk)
begin
if(rst)
count=32'b0;
else 
count=count+1;
end
 
 endmodule
 
 
 
 /////////////////////////asynchronous reset
  module simple_counter1(clk,rst,count);
 input clk,rst;
 output reg [31:0]count;
 
always@(posedge clk,posedge rst)
begin
if(rst)
count=32'b0;
else 
count=count+1;
end
 
 endmodule
 
 
 
 /*module memory_array(output mem_bit);
 reg [15:0]mem_bit[0:2026];
 endmodule*/
 
 
 //// use of parameter
 
module simple_counter2(clk,rst,count);
parameter N=7;
input clk,rst;
output reg [N:0]count;
 
always@(posedge clk)
begin
if(rst)
count=32'b0;
else 
count=count+1;
end
endmodule



////////////////////ASSIGN OPERATOR

module operator_example(x,y,f1,f2);
input x,y;
output f1,f2;
wire[9:0] x,y;
wire[4:0] f1;
wire f2;

assign f1= x[4:0]& y[4:0];
assign f2= x[2] & f1[3];
assign f2= ~&x;
 assign f1 = f2? x[9:5] : x[4:0];

endmodule




////////////////////////////// 8 bit adder description



module paralleladder(sum,cout,a,b,c);
input [7:0]a,b;
input c;
output [7:0] sum;
output cout;

assign #20 {cout,sum}=a+b+c;     ///////concatenation
endmodule


///////////////full adder

module adder(sum,cout,a,b,c);
input a,b,c;
output sum,cout;

assign sum= a^b^c;
assign cout=(a&b)|(c&b)|(b&c);


///////////////interm of gates
wire s1,c1,c2;
XOR G1(s1,a,b),
   G2(sum,s1,c),
   G3(cout,c2,c1);
   
   AND G4(c1,a,b),
       G5(c2,s1,c);
       ////////////////////////////other module
   

endmodule 


//////////////////mux building

module MUX(data,select,out);
input [15:0]data;
input[3:0]select;
output out;
  assign out=data[select];     ////select will create MUX as it was dependent on the data value
endmodule


////////////////conditional  operator


module generateMUX(out,a,b,sel);
input [3:0]a,b;
input sel;
output [3:0]out;

assign out=sel?a:b;
endmodule


/////////////////////////////

/*    
assign f=(a==0)? (c+d):(c-d);
if a=0 then y=c+d;
if a=1 then y= c-d;
*/


////////////////////////////////decoder

module decoder(out,in,select);
input in;
output [0:3]out;
output [1:0]select;

//assign out[select]=in;             here error is coming so i have to resolve it
endmodule


//////////////////D latch


module level_sensitive(D,Q,En);
input D,En;
output Q;

assign Q= En? D : Q;
endmodule

////////////////////SR LATCH


module SR(q,qbar,s,r);
input s,r;
output q,qbar;

assign q=~(r&qbar);
assign qbar=~(s&q);

endmodule


/////////////////////////////d flipflop behavioral description


module dff(q,qbar,d,set,reset,clk);
input d,set,reset,clk;
output reg q;
output qbar;

assign qbar=~q;

always@(posedge clk)
begin
    if(reset==0)
       q<=0;
    if(set==0)
       q<=1;
    else
    q<=d;
end
endmodule


///////////////////mux

module mux(a,b,s,f);
input a,b,s;
output reg f;

always@(s)
begin
if(s)
f=a;
else
f=b;
end
endmodule


////////////////////////////////reset counter\\\

module counter(clk,rst,count);
input clk,rst;
output reg[3:0]count;

always@(posedge clk,posedge rst)
begin
if (rst)
count<=0;
else
count<=count+1;
end
endmodule

 
 /////////////////////////4 bit simple alu
 
 module alu(f,a,b,op);
 input [7:0] a,b;
 input [1:0] op;
  output reg[7:0] f;
  
 always@(*)
 case(op)
 00 : f=a+b;
 01 : f=a-b;
 10 : f=a*b;
 11 : f=a/b;
 
 endcase
  endmodule
  
  
  ////////////////////prority encoder
  
  
  module priorityencoder(in,code);
  input  [7:0]in;
  output reg[2:0]code;
  
  always@(in)
  begin                            //////////////////////////sequence decide the priority
  if(in[0])    code=3'b000;
  else if(in[1]) code=3'b001;
  else if(in[1]) code=3'b001;
  else if(in[2]) code=3'b010;
  else if(in[3]) code=3'b011;
  else if(in[4]) code=3'b100;
  else if(in[5]) code=3'b101;
  else if(in[6]) code=3'b110;
  else if(in[7]) code=3'b110;
  else code=3'bxxx;
  end
  endmodule
  
  
  ///////////////////////////////////////n bit comparator
  
  
  module compatartor(a,b,lt,gt,eq);
  parameter word_size=15;
  input [word_size:0] a,b;
  output reg lt,gt,eq;
  
  always@(*)
  begin
  lt=0;gt=0;eq=0;
  if(a>b) gt=1;
  else if (a<b) lt=1;
  else eq=1;
  end
  endmodule
  
  
  //////////////////////////////////////mux using behavioral description
  
  
  module mux2(y,s,a,b);
  input a,b,s;
  output reg y;
  
  always@(s)
  case(s)
  0 : y=a;
  1 : y=b;
  default : y=1'bx;
  endcase
  endmodule
  
  
  
  ////////////////////////////up down counter
  
  
  module updowncounter(mode,clr,ld,din,clk,count);
  input mode,clr,ld,clk;
  input[0:7] din;
  output reg [0:7] count;
  
  always@(posedge clk)
  if(ld)    count<=din;
  else if(clr) count<=0;
  else if(mode) count<=count+1;
  else count=count-1;
  
  endmodule
  
  
  
  ////////////////////multiedge 
  
  module multiedge(a,b,c,d,f,clk);
  input clk;
  input [7:0]a,b,d;
  output reg [7:0] c,f;
  always@(posedge clk)
  c<=a+b;
  always@(negedge clk)
  f<=c-d;
  
  endmodule
  
  
  ///////////////////////////////// ring counter
  
  
  module ringcounter(clk,init,count);
  input clk,init;
  output reg [7:0]count;
  always@(posedge clk)
  begin
  if(init)
  count=8'b10000000;
  else
  begin
  count<=count<<1;
  count[0]<=count[7];
  end
  
  end
  endmodule
  
  
  ////////////////////////////shift register
  
  
  module shiftregister(clock,clear,a,e);
  input clock,clear,a;
  output reg e;
  reg b,c,d;
  always@(posedge clock ,negedge clear)
  begin
           if(!clear)
             begin
              b=0;c=0;d=0;e=0;
             end
           else
             begin
               e=d;
               d=c;
               c=b;
               b=a;
            end
  end
  endmodule
  
  
  
  
  ////////////////////user define primitive
  
  
 primitive adder3(sum,a,b,c);
 input a,b,c;
 output sum;
 
 table
 //     a b c       sum
        0 0 0 : 0;
        0 0 1 : 1;
        0 1 0 : 1;
        0 1 1 : 0;
        1 0 0 : 1;
        endtable
 endprimitive
 
 
 
////////////////////////